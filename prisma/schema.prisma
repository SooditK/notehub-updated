// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "cockroachdb"
    // url      = "file:./db.sqlite"
    url      = env("DATABASE_URL")
    // referentialIntegrity = "prisma"
}

// Neccessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
    Likes         Likes[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id          String   @id @default(cuid())
    title       String
    description String
    link        String
    university  String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
    author      User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String?
    Subject     Subject? @relation(fields: [subjectId], references: [id])
    subjectId   String?
    Likes       Likes[]
}

model Subject {
    id         String   @id @default(cuid())
    name       String
    code       String   @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    Post       Post[]
}

model Likes {
    id        String   @id @default(cuid())
    userId    String
    postId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
